# body for query that extracts class axioms

#
# This file is part of ontor (https://github.com/felixocker/ontor).
# Copyright (c) 2021 Felix Ocker.
#
# ontor is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ontor is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ontor.  If not, see <https://www.gnu.org/licenses/>.
#

# NOTE: this query assumes DNF of axioms
# NOTE: currently unsupported features: disjoint union, general class axiom, target for key

SELECT DISTINCT ?class ?eq ?rel ?p ?o ?minex ?minin ?maxex ?maxin WHERE 
{
    # get axiomatized classes
    VALUES ?rel { owl:equivalentClass rdfs:subClassOf owl:disjointWith }
    ?class ?rel ?eq . 
    # ignore general class axioms
    FILTER NOT EXISTS { ?class owl:intersectionOf ?x . }
    FILTER NOT EXISTS { ?class owl:unionOf ?x . }
    FILTER NOT EXISTS { ?class a owl:Restriction . }
    # axiom consisting of single class or pred-obj triple
    {
        { 
            ?eq a owl:Class . 
            BIND( ?eq as ?o )
        } UNION { 
            ?eq a owl:Restriction ; 
                owl:onProperty ?p . 
            { 
                ?eq owl:onClass ?o . 
            } UNION { 
                ?eq owl:someValuesFrom ?o . 
                FILTER NOT EXISTS { ?o owl:onDatatype ?dt . }
            } UNION {
                ?eq owl:someValuesFrom/owl:onDatatype ?o . 
                OPTIONAL { ?eq owl:someValuesFrom/owl:withRestrictions/rdf:first/xsd:minExclusive ?minex . }
                OPTIONAL { ?eq owl:someValuesFrom/owl:withRestrictions/rdf:first/xsd:minInclusive ?minin . }
                OPTIONAL { ?eq owl:someValuesFrom/owl:withRestrictions/rdf:rest/rdf:first/xsd:maxExclusive ?maxex . }
                OPTIONAL { ?eq owl:someValuesFrom/owl:withRestrictions/rdf:rest/rdf:first/xsd:maxInclusive ?maxin . }
            }
        }
        FILTER NOT EXISTS { ?eq owl:unionOf _:u . } 
        FILTER NOT EXISTS { ?eq owl:intersectionOf _:i . } 
    } 
    UNION 
    # axiom that is an intersection or union of at least two predicates and objects
    {
        {
            ?eq owl:unionOf/rdf:rest*/rdf:first ?lvl1 . 
            FILTER NOT EXISTS { ?lvl1 owl:unionOf _:uu . } 
            FILTER NOT EXISTS { ?lvl1 owl:intersectionOf _:ui . } 
        } UNION {
            ?eq owl:intersectionOf/rdf:rest*/rdf:first ?lvl1 . 
            FILTER NOT EXISTS { ?lvl1 owl:unionOf _:iu . } 
            FILTER NOT EXISTS { ?lvl1 owl:intersectionOf _:ii . } 
        }
        OPTIONAL {
            { 
                ?lvl1 a owl:Class . 
                BIND( ?lvl1 as ?o )
            } UNION { 
                ?lvl1 a owl:Restriction ; 
                    owl:onProperty ?p . 
                { 
                    ?lvl1 owl:onClass ?o . 
                } UNION { 
                    ?lvl1 owl:someValuesFrom ?o . 
                    FILTER NOT EXISTS { ?o owl:onDatatype ?dt . }
                } UNION {
                    ?lvl1 owl:someValuesFrom/owl:onDatatype ?o . 
                    OPTIONAL { ?lvl1 owl:someValuesFrom/owl:withRestrictions/rdf:first/xsd:minExclusive ?minex . }
                    OPTIONAL { ?lvl1 owl:someValuesFrom/owl:withRestrictions/rdf:first/xsd:minInclusive ?minin . }
                    OPTIONAL { ?lvl1 owl:someValuesFrom/owl:withRestrictions/rdf:rest/rdf:first/xsd:maxExclusive ?maxex . }
                    OPTIONAL { ?lvl1 owl:someValuesFrom/owl:withRestrictions/rdf:rest/rdf:first/xsd:maxInclusive ?maxin . }
                }
            }
        }
    }
    UNION 
    # axiom that is a nested intersection or union of at least two predicates and objects
    {
        # union of unions
        {
            ?eq owl:unionOf/rdf:rest*/rdf:first ?lvl1 . 
            ?lvl1 owl:unionOf/rdf:rest*/rdf:first ?lvl2 . 
            FILTER NOT EXISTS { ?lvl2 owl:unionOf _:uuu . } 
            FILTER NOT EXISTS { ?lvl2 owl:intersectionOf _:uui . } 
        } UNION 
        # union of intersections (only relevant case if DNF assumption holds)
        {
            ?eq owl:unionOf/rdf:rest*/rdf:first ?lvl1 . 
            ?lvl1 owl:intersectionOf/rdf:rest*/rdf:first ?lvl2 . 
            FILTER NOT EXISTS { ?lvl2 owl:unionOf _:uiu . } 
            FILTER NOT EXISTS { ?lvl2 owl:intersectionOf _:uii . } 
        } UNION 
        # intersection of unions
        {
            ?eq owl:intersectionOf/rdf:rest*/rdf:first ?lvl1 . 
            ?lvl1 owl:unionOf/rdf:rest*/rdf:first ?lvl2 . 
            FILTER NOT EXISTS { ?lvl2 owl:unionOf _:iuu . } 
            FILTER NOT EXISTS { ?lvl2 owl:intersectionOf _:iui . } 
        } UNION 
        # intersection of intersections
        {
            ?eq owl:intersectionOf/rdf:rest*/rdf:first ?lvl1 . 
            ?lvl1 owl:intersectionOf/rdf:rest*/rdf:first ?lvl2 . 
            FILTER NOT EXISTS { ?lvl2 owl:unionOf _:iiu . } 
            FILTER NOT EXISTS { ?lvl2 owl:intersectionOf _:iii . } 
        } 
        OPTIONAL {
            { 
                ?lvl2 a owl:Class . 
                BIND( ?lvl2 as ?o )
            } UNION { 
                ?lvl2 a owl:Restriction ; 
                    owl:onProperty ?p . 
                { 
                    ?lvl2 owl:onClass ?o . 
                } UNION { 
                    ?lvl2 owl:someValuesFrom ?o . 
                    FILTER NOT EXISTS { ?o owl:onDatatype ?dt . }
                } UNION {
                    ?lvl2 owl:someValuesFrom/owl:onDatatype ?o . 
                    OPTIONAL { ?lvl2 owl:someValuesFrom/owl:withRestrictions/rdf:first/xsd:minExclusive ?minex . }
                    OPTIONAL { ?lvl2 owl:someValuesFrom/owl:withRestrictions/rdf:first/xsd:minInclusive ?minin . }
                    OPTIONAL { ?lvl2 owl:someValuesFrom/owl:withRestrictions/rdf:rest/rdf:first/xsd:maxExclusive ?maxex . }
                    OPTIONAL { ?lvl2 owl:someValuesFrom/owl:withRestrictions/rdf:rest/rdf:first/xsd:maxInclusive ?maxin . }
                }
            }
        }
    }
}
ORDER BY ?class ?eq ?p ?o
